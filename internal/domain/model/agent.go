package model

import (
	"fmt"
	"time"

	"github.com/google/uuid"

	"github.com/minuk-dev/opampcommander/internal/domain/model/agent"
	"github.com/minuk-dev/opampcommander/internal/domain/model/remoteconfig"
	"github.com/minuk-dev/opampcommander/internal/domain/model/vo"
)

// Agent is a domain model to control opamp agent by opampcommander.
type Agent struct {
	Metadata AgentMetadata
	Spec     AgentSpec
	Commands AgentCommands
	Status   AgentStatus
}

// NewAgent creates a new agent with the given instance UID.
// It initializes all fields with default values.
// You can optionally pass AgentOption functions to customize the agent.
func NewAgent(instanceUID uuid.UUID, opts ...AgentOption) *Agent {
	agent := &Agent{
		//exhaustruct:ignore
		Metadata: AgentMetadata{
			InstanceUID: instanceUID,
		},
		Spec: AgentSpec{
			RemoteConfig: remoteconfig.New(),
		},
		Status: AgentStatus{
			EffectiveConfig: AgentEffectiveConfig{
				ConfigMap: AgentConfigMap{
					ConfigMap: make(map[string]AgentConfigFile),
				},
			},
			//exhaustruct:ignore
			PackageStatuses: AgentPackageStatuses{
				Packages: make(map[string]AgentPackageStatus),
			},
			//exhaustruct:ignore
			ComponentHealth: AgentComponentHealth{
				StartTime:          time.Now(),
				ComponentHealthMap: make(map[string]AgentComponentHealth),
			},
			//exhaustruct:ignore
			AvailableComponents: AgentAvailableComponents{
				Components: make(map[string]ComponentDetails),
			},
		},
		Commands: AgentCommands{
			Commands: []AgentCommand{},
		},
	}

	// Apply options
	for _, opt := range opts {
		opt(agent)
	}

	return agent
}

// AgentOption is a function that configures an Agent.
type AgentOption func(*Agent)

// WithDescription sets the agent description.
func WithDescription(description *agent.Description) AgentOption {
	return func(a *Agent) {
		if description != nil {
			a.Metadata.Description = *description
		}
	}
}

// WithCapabilities sets the agent capabilities.
func WithCapabilities(capabilities *agent.Capabilities) AgentOption {
	return func(a *Agent) {
		if capabilities != nil {
			a.Metadata.Capabilities = *capabilities
		}
	}
}

// WithCustomCapabilities sets the agent custom capabilities.
func WithCustomCapabilities(customCapabilities *AgentCustomCapabilities) AgentOption {
	return func(a *Agent) {
		if customCapabilities != nil {
			a.Metadata.CustomCapabilities = *customCapabilities
		}
	}
}

// WithEffectiveConfig sets the agent effective config.
func WithEffectiveConfig(effectiveConfig *AgentEffectiveConfig) AgentOption {
	return func(a *Agent) {
		if effectiveConfig != nil {
			a.Status.EffectiveConfig = *effectiveConfig
		}
	}
}

// WithComponentHealth sets the agent component health.
func WithComponentHealth(componentHealth *AgentComponentHealth) AgentOption {
	return func(a *Agent) {
		if componentHealth != nil {
			a.Status.ComponentHealth = *componentHealth
		}
	}
}

// WithPackageStatuses sets the agent package statuses.
func WithPackageStatuses(packageStatuses *AgentPackageStatuses) AgentOption {
	return func(a *Agent) {
		if packageStatuses != nil {
			a.Status.PackageStatuses = *packageStatuses
		}
	}
}

// WithAvailableComponents sets the agent available components.
func WithAvailableComponents(availableComponents *AgentAvailableComponents) AgentOption {
	return func(a *Agent) {
		if availableComponents != nil {
			a.Status.AvailableComponents = *availableComponents
		}
	}
}

// WithRemoteConfigStatus sets the agent remote config status.
func WithRemoteConfigStatus(remoteConfigStatus *AgentRemoteConfigStatus) AgentOption {
	return func(agent *Agent) {
		if remoteConfigStatus != nil {
			if remoteConfigStatus.ErrorMessage != "" {
				agent.Spec.RemoteConfig.SetLastErrorMessage(remoteConfigStatus.ErrorMessage)
			}

			agent.Spec.RemoteConfig.SetStatus(
				vo.Hash(remoteConfigStatus.LastRemoteConfigHash),
				remoteConfigStatus.Status,
			)
		}
	}
}

// AgentMetadata is a domain model to control opamp agent metadata.
type AgentMetadata struct {
	// InstanceUID is a unique identifier for the agent instance.
	// It is generated by the agent and should not change between restarts of the agent.
	InstanceUID uuid.UUID

	// Description is a agent description defined in the opamp protocol.
	// It is set by the agent and should not change between restarts of the agent.
	// It can be changed by the agent at any time.
	Description agent.Description

	// Capabilities is a agent capabilities defined in the opamp protocol.
	Capabilities agent.Capabilities

	// CustomCapabilities is a list of custom capabilities that the Agent supports.
	CustomCapabilities AgentCustomCapabilities
}

// IsComplete checks if all required metadata fields are populated.
// Returns true if the agent has reported its description and capabilities.
func (am *AgentMetadata) IsComplete() bool {
	// Check if Description has any attributes
	hasDescription := len(am.Description.IdentifyingAttributes) > 0 ||
		len(am.Description.NonIdentifyingAttributes) > 0

	// Check if Capabilities is not zero (unset)
	hasCapabilities := am.Capabilities != 0

	return hasDescription && hasCapabilities
}

// AgentStatus is a domain model to control opamp agent status.
type AgentStatus struct {
	EffectiveConfig     AgentEffectiveConfig
	PackageStatuses     AgentPackageStatuses
	ComponentHealth     AgentComponentHealth
	AvailableComponents AgentAvailableComponents
}

// AgentCommands is a list of commands to be sent to the agent.
type AgentCommands struct {
	Commands []AgentCommand
}

// Clear removes all commands and returns them.
func (ac *AgentCommands) Clear() []AgentCommand {
	commands := ac.Commands
	ac.Commands = []AgentCommand{}

	return commands
}

// SendReportFullState adds a ReportFullState command to the commands list.
func (ac *AgentCommands) SendReportFullState(reportFullState bool, requestedAt time.Time, requestedBy string) {
	ac.Commands = append(ac.Commands, AgentCommand{
		CommandID:       uuid.New(),
		ReportFullState: reportFullState,
		CreatedAt:       requestedAt,
		CreatedBy:       requestedBy,
	})
}

// HasReportFullStateCommand checks if there's any ReportFullState command.
func (ac *AgentCommands) HasReportFullStateCommand() bool {
	for _, cmd := range ac.Commands {
		if cmd.ReportFullState {
			return true
		}
	}

	return false
}

// AgentCommand is a domain model to control opamp agent commands.
type AgentCommand struct {
	// CommandID is a unique identifier for the command.
	CommandID uuid.UUID
	// ReportFullState is a flag to indicate whether the agent should report full state.
	// If true, the agent should report all state information.
	// More details, see https://github.com/open-telemetry/opamp-spec/blob/main/specification.md#servertoagentflags
	ReportFullState bool
	// CreatedAt is the time the command was created.
	CreatedAt time.Time
	// CreatedBy is the user who created the command.
	CreatedBy string
}

// AgentSpec is a domain model to control opamp agent spec.
type AgentSpec struct {
	RemoteConfig remoteconfig.RemoteConfig
}

// AgentComponentHealth is a domain model to control opamp agent component health.
type AgentComponentHealth struct {
	// Set to true if the Agent is up and healthy.
	Healthy bool

	// Timestamp since the Agent is up
	StartTime time.Time

	// Human-readable error message if the Agent is in erroneous state. SHOULD be set when healthy==false.
	LastError string

	// Component status represented as a string.
	// The status values are defined by agent-specific semantics and not at the protocol level.
	Status string

	// The time when the component status was observed.
	StatusTime time.Time

	// A map to store more granular, sub-component health.
	// It can nest as deeply as needed to describe the underlying system.
	ComponentHealthMap map[string]AgentComponentHealth
}

// AgentEffectiveConfig is the effective configuration of the agent.
type AgentEffectiveConfig struct {
	ConfigMap AgentConfigMap
}

// AgentConfigMap is a map of configuration files.
type AgentConfigMap struct {
	// The config_map field of the AgentConfigSet message is a map of configuration files, where keys are file names.
	ConfigMap map[string]AgentConfigFile
}

// AgentConfigFile is a configuration file.
type AgentConfigFile struct {
	// The body field contains the raw bytes of the configuration file.
	// The content, format and encoding of the raw bytes is Agent type-specific and is outside the concerns of OpAMP
	// protocol.
	Body []byte

	// content_type is an optional field. It is a MIME Content-Type that describes what's contained in the body field,
	// for example "text/yaml". The content_type reported in the Effective Configuration in the Agent's status report may
	// be used for example by the Server to visualize the reported configuration nicely in a UI.
	ContentType string
}

// AgentRemoteConfigStatus is the status of the remote configuration.
type AgentRemoteConfigStatus struct {
	LastRemoteConfigHash []byte
	Status               remoteconfig.Status
	ErrorMessage         string
}

// AgentPackageStatuses is a map of package statuses.
type AgentPackageStatuses struct {
	Packages                     map[string]AgentPackageStatus
	ServerProvidedAllPackgesHash []byte
	ErrorMessage                 string
}

// AgentPackageStatus is the status of a package.
type AgentPackageStatus struct {
	Name                 string
	AgentHasVersion      string
	AgentHasHash         []byte
	ServerOfferedVersion string
	Status               AgentPackageStatusEnum
	ErrorMessage         string
}

// AgentPackageStatusEnum is an enum that represents the status of a package.
type AgentPackageStatusEnum int32

// AgentPackageStatusEnum values
// The AgentPackageStatusEnum enum is defined in the opamp protocol.
const (
	AgentPackageStatusEnumInstalled      = 0
	AgentPackageStatusEnumInstallPending = 1
	AgentPackageStatusEnumInstalling     = 2
	AgentPackageStatusEnumInstallFailed  = 3
	AgentPackageStatusEnumDownloading    = 4
)

// AgentCustomCapabilities is a list of custom capabilities that the Agent supports.
type AgentCustomCapabilities struct {
	Capabilities []string
}

// AgentAvailableComponents is a map of available components.
type AgentAvailableComponents struct {
	Components map[string]ComponentDetails
	Hash       []byte
}

// ComponentDetails is a details of a component.
type ComponentDetails struct {
	Metadata        map[string]string
	SubComponentMap map[string]ComponentDetails
}

// ReportDescription is a method to report the description of the agent.
func (a *Agent) ReportDescription(desc *agent.Description) error {
	if desc == nil {
		return nil // No description to report
	}

	a.Metadata.Description = *desc

	return nil
}

// ReportComponentHealth is a method to report the component health of the agent.
func (a *Agent) ReportComponentHealth(health *AgentComponentHealth) error {
	if health == nil {
		return nil // No health to report
	}

	a.Status.ComponentHealth = *health

	return nil
}

// ReportCapabilities is a method to report the capabilities of the agent.
func (a *Agent) ReportCapabilities(capabilities *agent.Capabilities) error {
	if capabilities == nil {
		return nil // No capabilities to report
	}

	a.Metadata.Capabilities = *capabilities

	return nil
}

// ReportEffectiveConfig is a method to report the effective configuration of the agent.
func (a *Agent) ReportEffectiveConfig(config *AgentEffectiveConfig) error {
	if config == nil {
		return nil // No effective config to report
	}

	a.Status.EffectiveConfig = *config

	return nil
}

// ReportRemoteConfigStatus is a method to report the remote configuration status of the agent.
func (a *Agent) ReportRemoteConfigStatus(status *AgentRemoteConfigStatus) error {
	if status == nil {
		return nil // No remote config status to report
	}

	if status.ErrorMessage != "" {
		a.Spec.RemoteConfig.SetLastErrorMessage(status.ErrorMessage)
	}

	a.Spec.RemoteConfig.SetStatus(
		vo.Hash(status.LastRemoteConfigHash),
		status.Status,
	)

	return nil
}

// ApplyRemoteConfig is a method to apply the remote configuration to the agent.
func (a *Agent) ApplyRemoteConfig(config any) error {
	subconfig, err := remoteconfig.NewCommand(config)
	if err != nil {
		return fmt.Errorf("failed to create remote config command: %w", err)
	}

	err = a.Spec.RemoteConfig.ApplyRemoteConfig(subconfig)
	if err != nil {
		return fmt.Errorf("failed to apply remote config: %w", err)
	}

	return nil
}

// ReportPackageStatuses is a method to report the package statuses of the agent.
func (a *Agent) ReportPackageStatuses(status *AgentPackageStatuses) error {
	if status == nil {
		return nil // No package statuses to report
	}

	a.Status.PackageStatuses = *status

	return nil
}

// ReportCustomCapabilities is a method to report the custom capabilities of the agent.
func (a *Agent) ReportCustomCapabilities(capabilities *AgentCustomCapabilities) error {
	if capabilities == nil {
		return nil // No custom capabilities to report
	}

	a.Metadata.CustomCapabilities = *capabilities

	return nil
}

// ReportAvailableComponents is a method to report the available components of the agent.
func (a *Agent) ReportAvailableComponents(availableComponents *AgentAvailableComponents) error {
	if availableComponents == nil {
		return nil // No available components to report
	}

	a.Status.AvailableComponents = *availableComponents

	return nil
}

// SetReportFullState is a method to set the report full state of the agent.
func (a *Agent) SetReportFullState(reportFullState bool, requestedAt time.Time, requestedBy string) {
	a.Commands.SendReportFullState(reportFullState, requestedAt, requestedBy)
}
