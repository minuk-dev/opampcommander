// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package usecasemock

import (
	"context"

	"github.com/minuk-dev/opampcommander/api/v1/agent"
	"github.com/minuk-dev/opampcommander/api/v1/agentgroup"
	"github.com/minuk-dev/opampcommander/internal/application/port"
	"github.com/minuk-dev/opampcommander/internal/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// NewMockUsecase creates a new instance of MockUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUsecase {
	mock := &MockUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUsecase is an autogenerated mock type for the Usecase type
type MockUsecase struct {
	mock.Mock
}

type MockUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsecase) EXPECT() *MockUsecase_Expecter {
	return &MockUsecase_Expecter{mock: &_m.Mock}
}

// CreateAgentGroup provides a mock function for the type MockUsecase
func (_mock *MockUsecase) CreateAgentGroup(ctx context.Context, createCommand *port.CreateAgentGroupCommand) (*agentgroup.AgentGroup, error) {
	ret := _mock.Called(ctx, createCommand)

	if len(ret) == 0 {
		panic("no return value specified for CreateAgentGroup")
	}

	var r0 *agentgroup.AgentGroup
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *port.CreateAgentGroupCommand) (*agentgroup.AgentGroup, error)); ok {
		return returnFunc(ctx, createCommand)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *port.CreateAgentGroupCommand) *agentgroup.AgentGroup); ok {
		r0 = returnFunc(ctx, createCommand)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agentgroup.AgentGroup)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *port.CreateAgentGroupCommand) error); ok {
		r1 = returnFunc(ctx, createCommand)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUsecase_CreateAgentGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAgentGroup'
type MockUsecase_CreateAgentGroup_Call struct {
	*mock.Call
}

// CreateAgentGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - createCommand *port.CreateAgentGroupCommand
func (_e *MockUsecase_Expecter) CreateAgentGroup(ctx interface{}, createCommand interface{}) *MockUsecase_CreateAgentGroup_Call {
	return &MockUsecase_CreateAgentGroup_Call{Call: _e.mock.On("CreateAgentGroup", ctx, createCommand)}
}

func (_c *MockUsecase_CreateAgentGroup_Call) Run(run func(ctx context.Context, createCommand *port.CreateAgentGroupCommand)) *MockUsecase_CreateAgentGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *port.CreateAgentGroupCommand
		if args[1] != nil {
			arg1 = args[1].(*port.CreateAgentGroupCommand)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUsecase_CreateAgentGroup_Call) Return(agentGroup *agentgroup.AgentGroup, err error) *MockUsecase_CreateAgentGroup_Call {
	_c.Call.Return(agentGroup, err)
	return _c
}

func (_c *MockUsecase_CreateAgentGroup_Call) RunAndReturn(run func(ctx context.Context, createCommand *port.CreateAgentGroupCommand) (*agentgroup.AgentGroup, error)) *MockUsecase_CreateAgentGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAgentGroup provides a mock function for the type MockUsecase
func (_mock *MockUsecase) DeleteAgentGroup(ctx context.Context, name string) error {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAgentGroup")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUsecase_DeleteAgentGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAgentGroup'
type MockUsecase_DeleteAgentGroup_Call struct {
	*mock.Call
}

// DeleteAgentGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockUsecase_Expecter) DeleteAgentGroup(ctx interface{}, name interface{}) *MockUsecase_DeleteAgentGroup_Call {
	return &MockUsecase_DeleteAgentGroup_Call{Call: _e.mock.On("DeleteAgentGroup", ctx, name)}
}

func (_c *MockUsecase_DeleteAgentGroup_Call) Run(run func(ctx context.Context, name string)) *MockUsecase_DeleteAgentGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUsecase_DeleteAgentGroup_Call) Return(err error) *MockUsecase_DeleteAgentGroup_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUsecase_DeleteAgentGroup_Call) RunAndReturn(run func(ctx context.Context, name string) error) *MockUsecase_DeleteAgentGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetAgentGroup provides a mock function for the type MockUsecase
func (_mock *MockUsecase) GetAgentGroup(ctx context.Context, name string) (*agentgroup.AgentGroup, error) {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetAgentGroup")
	}

	var r0 *agentgroup.AgentGroup
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*agentgroup.AgentGroup, error)); ok {
		return returnFunc(ctx, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *agentgroup.AgentGroup); ok {
		r0 = returnFunc(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agentgroup.AgentGroup)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUsecase_GetAgentGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAgentGroup'
type MockUsecase_GetAgentGroup_Call struct {
	*mock.Call
}

// GetAgentGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockUsecase_Expecter) GetAgentGroup(ctx interface{}, name interface{}) *MockUsecase_GetAgentGroup_Call {
	return &MockUsecase_GetAgentGroup_Call{Call: _e.mock.On("GetAgentGroup", ctx, name)}
}

func (_c *MockUsecase_GetAgentGroup_Call) Run(run func(ctx context.Context, name string)) *MockUsecase_GetAgentGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUsecase_GetAgentGroup_Call) Return(agentGroup *agentgroup.AgentGroup, err error) *MockUsecase_GetAgentGroup_Call {
	_c.Call.Return(agentGroup, err)
	return _c
}

func (_c *MockUsecase_GetAgentGroup_Call) RunAndReturn(run func(ctx context.Context, name string) (*agentgroup.AgentGroup, error)) *MockUsecase_GetAgentGroup_Call {
	_c.Call.Return(run)
	return _c
}

// ListAgentGroups provides a mock function for the type MockUsecase
func (_mock *MockUsecase) ListAgentGroups(ctx context.Context, options *model.ListOptions) (*agentgroup.ListResponse, error) {
	ret := _mock.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for ListAgentGroups")
	}

	var r0 *agentgroup.ListResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.ListOptions) (*agentgroup.ListResponse, error)); ok {
		return returnFunc(ctx, options)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.ListOptions) *agentgroup.ListResponse); ok {
		r0 = returnFunc(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agentgroup.ListResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *model.ListOptions) error); ok {
		r1 = returnFunc(ctx, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUsecase_ListAgentGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAgentGroups'
type MockUsecase_ListAgentGroups_Call struct {
	*mock.Call
}

// ListAgentGroups is a helper method to define mock.On call
//   - ctx context.Context
//   - options *model.ListOptions
func (_e *MockUsecase_Expecter) ListAgentGroups(ctx interface{}, options interface{}) *MockUsecase_ListAgentGroups_Call {
	return &MockUsecase_ListAgentGroups_Call{Call: _e.mock.On("ListAgentGroups", ctx, options)}
}

func (_c *MockUsecase_ListAgentGroups_Call) Run(run func(ctx context.Context, options *model.ListOptions)) *MockUsecase_ListAgentGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.ListOptions
		if args[1] != nil {
			arg1 = args[1].(*model.ListOptions)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUsecase_ListAgentGroups_Call) Return(v *agentgroup.ListResponse, err error) *MockUsecase_ListAgentGroups_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockUsecase_ListAgentGroups_Call) RunAndReturn(run func(ctx context.Context, options *model.ListOptions) (*agentgroup.ListResponse, error)) *MockUsecase_ListAgentGroups_Call {
	_c.Call.Return(run)
	return _c
}

// ListAgentsByAgentGroup provides a mock function for the type MockUsecase
func (_mock *MockUsecase) ListAgentsByAgentGroup(ctx context.Context, agentGroupName string, options *model.ListOptions) (*agent.ListResponse, error) {
	ret := _mock.Called(ctx, agentGroupName, options)

	if len(ret) == 0 {
		panic("no return value specified for ListAgentsByAgentGroup")
	}

	var r0 *agent.ListResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *model.ListOptions) (*agent.ListResponse, error)); ok {
		return returnFunc(ctx, agentGroupName, options)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *model.ListOptions) *agent.ListResponse); ok {
		r0 = returnFunc(ctx, agentGroupName, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agent.ListResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *model.ListOptions) error); ok {
		r1 = returnFunc(ctx, agentGroupName, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUsecase_ListAgentsByAgentGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAgentsByAgentGroup'
type MockUsecase_ListAgentsByAgentGroup_Call struct {
	*mock.Call
}

// ListAgentsByAgentGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - agentGroupName string
//   - options *model.ListOptions
func (_e *MockUsecase_Expecter) ListAgentsByAgentGroup(ctx interface{}, agentGroupName interface{}, options interface{}) *MockUsecase_ListAgentsByAgentGroup_Call {
	return &MockUsecase_ListAgentsByAgentGroup_Call{Call: _e.mock.On("ListAgentsByAgentGroup", ctx, agentGroupName, options)}
}

func (_c *MockUsecase_ListAgentsByAgentGroup_Call) Run(run func(ctx context.Context, agentGroupName string, options *model.ListOptions)) *MockUsecase_ListAgentsByAgentGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *model.ListOptions
		if args[2] != nil {
			arg2 = args[2].(*model.ListOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUsecase_ListAgentsByAgentGroup_Call) Return(v *agent.ListResponse, err error) *MockUsecase_ListAgentsByAgentGroup_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockUsecase_ListAgentsByAgentGroup_Call) RunAndReturn(run func(ctx context.Context, agentGroupName string, options *model.ListOptions) (*agent.ListResponse, error)) *MockUsecase_ListAgentsByAgentGroup_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAgentGroup provides a mock function for the type MockUsecase
func (_mock *MockUsecase) UpdateAgentGroup(ctx context.Context, name string, agentGroup *agentgroup.AgentGroup) (*agentgroup.AgentGroup, error) {
	ret := _mock.Called(ctx, name, agentGroup)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAgentGroup")
	}

	var r0 *agentgroup.AgentGroup
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *agentgroup.AgentGroup) (*agentgroup.AgentGroup, error)); ok {
		return returnFunc(ctx, name, agentGroup)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *agentgroup.AgentGroup) *agentgroup.AgentGroup); ok {
		r0 = returnFunc(ctx, name, agentGroup)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agentgroup.AgentGroup)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *agentgroup.AgentGroup) error); ok {
		r1 = returnFunc(ctx, name, agentGroup)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUsecase_UpdateAgentGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAgentGroup'
type MockUsecase_UpdateAgentGroup_Call struct {
	*mock.Call
}

// UpdateAgentGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - agentGroup *agentgroup.AgentGroup
func (_e *MockUsecase_Expecter) UpdateAgentGroup(ctx interface{}, name interface{}, agentGroup interface{}) *MockUsecase_UpdateAgentGroup_Call {
	return &MockUsecase_UpdateAgentGroup_Call{Call: _e.mock.On("UpdateAgentGroup", ctx, name, agentGroup)}
}

func (_c *MockUsecase_UpdateAgentGroup_Call) Run(run func(ctx context.Context, name string, agentGroup *agentgroup.AgentGroup)) *MockUsecase_UpdateAgentGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *agentgroup.AgentGroup
		if args[2] != nil {
			arg2 = args[2].(*agentgroup.AgentGroup)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUsecase_UpdateAgentGroup_Call) Return(agentGroup1 *agentgroup.AgentGroup, err error) *MockUsecase_UpdateAgentGroup_Call {
	_c.Call.Return(agentGroup1, err)
	return _c
}

func (_c *MockUsecase_UpdateAgentGroup_Call) RunAndReturn(run func(ctx context.Context, name string, agentGroup *agentgroup.AgentGroup) (*agentgroup.AgentGroup, error)) *MockUsecase_UpdateAgentGroup_Call {
	_c.Call.Return(run)
	return _c
}
