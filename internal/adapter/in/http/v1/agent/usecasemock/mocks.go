// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package usecasemock

import (
	"context"

	"github.com/google/uuid"
	"github.com/minuk-dev/opampcommander/api/v1/agent"
	"github.com/minuk-dev/opampcommander/internal/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAgentManageUsecase creates a new instance of MockAgentManageUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAgentManageUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAgentManageUsecase {
	mock := &MockAgentManageUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAgentManageUsecase is an autogenerated mock type for the AgentManageUsecase type
type MockAgentManageUsecase struct {
	mock.Mock
}

type MockAgentManageUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAgentManageUsecase) EXPECT() *MockAgentManageUsecase_Expecter {
	return &MockAgentManageUsecase_Expecter{mock: &_m.Mock}
}

// GetAgent provides a mock function for the type MockAgentManageUsecase
func (_mock *MockAgentManageUsecase) GetAgent(ctx context.Context, instanceUID uuid.UUID) (*agent.Agent, error) {
	ret := _mock.Called(ctx, instanceUID)

	if len(ret) == 0 {
		panic("no return value specified for GetAgent")
	}

	var r0 *agent.Agent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*agent.Agent, error)); ok {
		return returnFunc(ctx, instanceUID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *agent.Agent); ok {
		r0 = returnFunc(ctx, instanceUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agent.Agent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, instanceUID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAgentManageUsecase_GetAgent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAgent'
type MockAgentManageUsecase_GetAgent_Call struct {
	*mock.Call
}

// GetAgent is a helper method to define mock.On call
//   - ctx context.Context
//   - instanceUID uuid.UUID
func (_e *MockAgentManageUsecase_Expecter) GetAgent(ctx interface{}, instanceUID interface{}) *MockAgentManageUsecase_GetAgent_Call {
	return &MockAgentManageUsecase_GetAgent_Call{Call: _e.mock.On("GetAgent", ctx, instanceUID)}
}

func (_c *MockAgentManageUsecase_GetAgent_Call) Run(run func(ctx context.Context, instanceUID uuid.UUID)) *MockAgentManageUsecase_GetAgent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAgentManageUsecase_GetAgent_Call) Return(agent1 *agent.Agent, err error) *MockAgentManageUsecase_GetAgent_Call {
	_c.Call.Return(agent1, err)
	return _c
}

func (_c *MockAgentManageUsecase_GetAgent_Call) RunAndReturn(run func(ctx context.Context, instanceUID uuid.UUID) (*agent.Agent, error)) *MockAgentManageUsecase_GetAgent_Call {
	_c.Call.Return(run)
	return _c
}

// ListAgents provides a mock function for the type MockAgentManageUsecase
func (_mock *MockAgentManageUsecase) ListAgents(ctx context.Context, options *model.ListOptions) (*agent.ListResponse, error) {
	ret := _mock.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for ListAgents")
	}

	var r0 *agent.ListResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.ListOptions) (*agent.ListResponse, error)); ok {
		return returnFunc(ctx, options)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.ListOptions) *agent.ListResponse); ok {
		r0 = returnFunc(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agent.ListResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *model.ListOptions) error); ok {
		r1 = returnFunc(ctx, options)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAgentManageUsecase_ListAgents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAgents'
type MockAgentManageUsecase_ListAgents_Call struct {
	*mock.Call
}

// ListAgents is a helper method to define mock.On call
//   - ctx context.Context
//   - options *model.ListOptions
func (_e *MockAgentManageUsecase_Expecter) ListAgents(ctx interface{}, options interface{}) *MockAgentManageUsecase_ListAgents_Call {
	return &MockAgentManageUsecase_ListAgents_Call{Call: _e.mock.On("ListAgents", ctx, options)}
}

func (_c *MockAgentManageUsecase_ListAgents_Call) Run(run func(ctx context.Context, options *model.ListOptions)) *MockAgentManageUsecase_ListAgents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.ListOptions
		if args[1] != nil {
			arg1 = args[1].(*model.ListOptions)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAgentManageUsecase_ListAgents_Call) Return(v *agent.ListResponse, err error) *MockAgentManageUsecase_ListAgents_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockAgentManageUsecase_ListAgents_Call) RunAndReturn(run func(ctx context.Context, options *model.ListOptions) (*agent.ListResponse, error)) *MockAgentManageUsecase_ListAgents_Call {
	_c.Call.Return(run)
	return _c
}

// SendCommand provides a mock function for the type MockAgentManageUsecase
func (_mock *MockAgentManageUsecase) SendCommand(ctx context.Context, targetInstanceUID uuid.UUID, command *model.Command) error {
	ret := _mock.Called(ctx, targetInstanceUID, command)

	if len(ret) == 0 {
		panic("no return value specified for SendCommand")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *model.Command) error); ok {
		r0 = returnFunc(ctx, targetInstanceUID, command)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAgentManageUsecase_SendCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendCommand'
type MockAgentManageUsecase_SendCommand_Call struct {
	*mock.Call
}

// SendCommand is a helper method to define mock.On call
//   - ctx context.Context
//   - targetInstanceUID uuid.UUID
//   - command *model.Command
func (_e *MockAgentManageUsecase_Expecter) SendCommand(ctx interface{}, targetInstanceUID interface{}, command interface{}) *MockAgentManageUsecase_SendCommand_Call {
	return &MockAgentManageUsecase_SendCommand_Call{Call: _e.mock.On("SendCommand", ctx, targetInstanceUID, command)}
}

func (_c *MockAgentManageUsecase_SendCommand_Call) Run(run func(ctx context.Context, targetInstanceUID uuid.UUID, command *model.Command)) *MockAgentManageUsecase_SendCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 *model.Command
		if args[2] != nil {
			arg2 = args[2].(*model.Command)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAgentManageUsecase_SendCommand_Call) Return(err error) *MockAgentManageUsecase_SendCommand_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAgentManageUsecase_SendCommand_Call) RunAndReturn(run func(ctx context.Context, targetInstanceUID uuid.UUID, command *model.Command) error) *MockAgentManageUsecase_SendCommand_Call {
	_c.Call.Return(run)
	return _c
}
