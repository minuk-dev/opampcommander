// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/agents": {
            "get": {
                "description": "Retrieve a list of agents.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agent"
                ],
                "summary": "List Agents",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Maximum number of agents to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Token to continue listing agents",
                        "name": "continue",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Agent"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/agents/{id}": {
            "get": {
                "description": "Retrieve an agent by its instance UID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agent"
                ],
                "summary": "Get Agent",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Instance UID of the agent",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Agent"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/agents/{id}/update-agent-config": {
            "post": {
                "description": "Create a new command to update the agent configuration.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agent"
                ],
                "summary": "Update Agent Configuration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Instance UID of the agent",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body containing the remote configuration",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateAgentConfigRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/AgentCommand"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/auth/basic": {
            "get": {
                "description": "Authenticate using basic auth credentials.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth",
                    "basic"
                ],
                "summary": "Basic Authentication",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AuthnTokenResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/auth/github": {
            "get": {
                "description": "Returns the GitHub OAuth2 authentication URL.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth",
                    "github"
                ],
                "summary": "GitHub OAuth2 Authentication",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/OAuth2AuthCodeURLResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/auth/github/device": {
            "get": {
                "description": "Initiates device authorization for GitHub OAuth2.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth",
                    "github"
                ],
                "summary": "GitHub Device Authentication",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DeviceAuthnTokenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/auth/github/device/exchange": {
            "get": {
                "description": "Exchanges a device code for an authentication token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth",
                    "github"
                ],
                "summary": "GitHub Device Code Exchange",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device code to exchange",
                        "name": "device_code",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Optional expiry time in RFC3339 format",
                        "name": "expiry",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AuthnTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/auth/info": {
            "get": {
                "description": "Get Authentication Info.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth",
                    "basic"
                ],
                "summary": "Info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/InfoResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/commands": {
            "get": {
                "description": "Retrieve a list of commands.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "command"
                ],
                "summary": "List Commands",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CommandAudit"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to list commands",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/commands/{id}": {
            "get": {
                "description": "Retrieve a command by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "command"
                ],
                "summary": "Get Command",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Command ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CommandAudit"
                        }
                    },
                    "400": {
                        "description": "Invalid command ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to get command",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/connections": {
            "get": {
                "description": "Retrieve a list of all connections.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "connection"
                ],
                "summary": "List Connections",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Connection"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/ping": {
            "get": {
                "description": "Ping the server to check if it is alive.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ping"
                ],
                "summary": "Ping",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PingResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/github": {
            "get": {
                "description": "Redirects to GitHub for OAuth2 authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth",
                    "github"
                ],
                "summary": "GitHub OAuth2 Authentication",
                "responses": {
                    "302": {
                        "description": "Found"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/auth/github/callback": {
            "get": {
                "description": "Exchanges the code received from GitHub for an authentication token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth",
                    "github"
                ],
                "summary": "GitHub OAuth2 Callback",
                "parameters": [
                    {
                        "type": "string",
                        "description": "State parameter to prevent CSRF attacks",
                        "name": "state",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Code received from GitHub after authentication",
                        "name": "code",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/AuthnTokenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Agent": {
            "type": "object",
            "properties": {
                "instanceUid": {
                    "description": "InstanceUID is a unique identifier for the agent instance.",
                    "type": "string"
                },
                "raw": {
                    "description": "Raw is a raw data of the agent.\nIt is used for debugging purposes."
                }
            }
        },
        "AgentCommand": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "id": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "targetInstanceUid": {
                    "type": "string"
                }
            }
        },
        "AuthnTokenResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "description": "Token is the authentication token.",
                    "type": "string"
                }
            }
        },
        "CommandAudit": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "id": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "targetInstanceUid": {
                    "type": "string"
                }
            }
        },
        "Connection": {
            "type": "object",
            "properties": {
                "alive": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "instanceUid": {
                    "type": "string"
                },
                "lastCommunicatedAt": {
                    "type": "string"
                }
            }
        },
        "DeviceAuthnTokenResponse": {
            "type": "object",
            "properties": {
                "deviceCode": {
                    "description": "DeviceCode",
                    "type": "string"
                },
                "expiry": {
                    "description": "Expiry is when the device code and user code expire",
                    "type": "string"
                },
                "interval": {
                    "description": "Interval is the duration in seconds that Poll should wait between requests",
                    "type": "integer"
                },
                "userCode": {
                    "description": "UserCode is the code the user should enter at the verification uri",
                    "type": "string"
                },
                "verificationUri": {
                    "description": "VerificationURI is where user should enter the user code",
                    "type": "string"
                },
                "verificationUriComplete": {
                    "description": "VerificationURIComplete (if populated) includes the user code in the verification URI.\nThis is typically shown to the user in non-textual form, such as a QR code.",
                    "type": "string"
                }
            }
        },
        "InfoResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "OAuth2AuthCodeURLResponse": {
            "type": "object",
            "properties": {
                "url": {
                    "description": "URL is the OAuth2 authorization URL.",
                    "type": "string"
                }
            }
        },
        "PingResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Message is the response message.",
                    "type": "string"
                }
            }
        },
        "UpdateAgentConfigRequest": {
            "type": "object",
            "required": [
                "remoteConfig"
            ],
            "properties": {
                "remoteConfig": {}
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "OpAMP Commander API Server",
	Description:      "This is the API server for OpAMP Commander, providing endpoints for managing OpAMP agents.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
