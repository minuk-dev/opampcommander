definitions:
  Agent:
    properties:
      availableComponents:
        $ref: '#/definitions/AgentAvailableComponents'
      capabilities:
        description: |-
          Capabilities is a bitmask representing the capabilities of the agent.
          It is used to determine what features the agent supports.
          If nil, it means the capabilities are unspecified.
        type: integer
      componentHealth:
        allOf:
        - $ref: '#/definitions/AgentComponentHealth'
        description: ComponentHealth is the health status of the agent's components.
      customCapabilities:
        allOf:
        - $ref: '#/definitions/AgentCustomCapabilities'
        description: CustomCapabilities is a map of custom capabilities for the agent.
      description:
        allOf:
        - $ref: '#/definitions/AgentDescription'
        description: Description is a human-readable description of the agent.
      effectiveConfig:
        allOf:
        - $ref: '#/definitions/AgentEffectiveConfig'
        description: |-
          EffectiveConfig is the effective configuration of the agent.
          It is used to determine the current configuration of the agent.
      instanceUid:
        description: InstanceUID is a unique identifier for the agent instance.
        type: string
      isManaged:
        description: |-
          IsManaged indicates whether the agent is managed by the server.
          If true, the server manages the agent and can send commands to it.
        type: boolean
      packageStatuses:
        allOf:
        - $ref: '#/definitions/AgentPackageStatuses'
        description: PackageStatuses is a map of package statuses for the agent.
      remoteConfig:
        allOf:
        - $ref: '#/definitions/AgentRemoteConfig'
        description: |-
          RemoteConfig is the remote configuration of the agent.
          It is used to determine the current remote configuration of the agent.
    type: object
  AgentAvailableComponents:
    type: object
  AgentCommand:
    properties:
      data:
        additionalProperties: {}
        type: object
      id:
        type: string
      kind:
        type: string
      targetInstanceUid:
        type: string
    type: object
  AgentComponentHealth:
    type: object
  AgentConfigFile:
    properties:
      body:
        type: string
      contentType:
        type: string
    type: object
  AgentConfigMap:
    properties:
      configMap:
        additionalProperties:
          $ref: '#/definitions/AgentConfigFile'
        type: object
    type: object
  AgentCustomCapabilities:
    type: object
  AgentDescription:
    properties:
      identifyingAttributes:
        additionalProperties:
          type: string
        description: IdentifyingAttributes are attributes that uniquely identify the
          agent.
        type: object
      nonIdentifyingAttributes:
        additionalProperties:
          type: string
        description: NonIdentifyingAttributes are attributes that do not uniquely
          identify the agent.
        type: object
    type: object
  AgentEffectiveConfig:
    properties:
      configMap:
        $ref: '#/definitions/AgentConfigMap'
    type: object
  AgentGroup:
    properties:
      attributes:
        $ref: '#/definitions/api_v1_agentgroup.Attributes'
      createdAt:
        type: string
      createdBy:
        type: string
      deletedAt:
        type: string
      deletedBy:
        type: string
      name:
        type: string
      selector:
        $ref: '#/definitions/agentgroup.AgentSelector'
    type: object
  AgentGroupCreateRequest:
    properties:
      attributes:
        $ref: '#/definitions/api_v1_agentgroup.Attributes'
      name:
        type: string
      selector:
        $ref: '#/definitions/agentgroup.AgentSelector'
    required:
    - name
    type: object
  AgentPackageStatus:
    properties:
      name:
        description: Name is the name of the package.
        type: string
    type: object
  AgentPackageStatuses:
    properties:
      errorMessage:
        type: string
      packages:
        additionalProperties:
          $ref: '#/definitions/AgentPackageStatus'
        type: object
      serverProvidedAllPackagesHash:
        type: string
    type: object
  AgentRemoteConfig:
    type: object
  AuthnTokenResponse:
    properties:
      token:
        description: Token is the authentication token.
        type: string
    type: object
  CommandAudit:
    properties:
      data:
        additionalProperties: {}
        type: object
      id:
        type: string
      kind:
        type: string
      targetInstanceUid:
        type: string
    type: object
  Connection:
    properties:
      alive:
        type: boolean
      id:
        type: string
      instanceUid:
        type: string
      lastCommunicatedAt:
        type: string
    type: object
  DeviceAuthnTokenResponse:
    properties:
      deviceCode:
        description: DeviceCode
        type: string
      expiry:
        description: Expiry is when the device code and user code expire
        type: string
      interval:
        description: Interval is the duration in seconds that Poll should wait between
          requests
        type: integer
      userCode:
        description: UserCode is the code the user should enter at the verification
          uri
        type: string
      verificationUri:
        description: VerificationURI is where user should enter the user code
        type: string
      verificationUriComplete:
        description: |-
          VerificationURIComplete (if populated) includes the user code in the verification URI.
          This is typically shown to the user in non-textual form, such as a QR code.
        type: string
    type: object
  InfoResponse:
    properties:
      authenticated:
        type: boolean
      email:
        type: string
    type: object
  OAuth2AuthCodeURLResponse:
    properties:
      url:
        description: URL is the OAuth2 authorization URL.
        type: string
    type: object
  PingResponse:
    properties:
      message:
        description: Message is the response message.
        type: string
    type: object
  UpdateAgentConfigRequest:
    properties:
      remoteConfig: {}
    required:
    - remoteConfig
    type: object
  VersionInfo:
    properties:
      buildDate:
        type: string
      compiler:
        type: string
      gitCommit:
        type: string
      gitTreeState:
        type: string
      gitVersion:
        type: string
      goVersion:
        type: string
      major:
        type: string
      minor:
        type: string
      platform:
        type: string
    type: object
  agentgroup.AgentSelector:
    properties:
      identifyingAttributes:
        additionalProperties:
          type: string
        type: object
      nonIdentifyingAttributes:
        additionalProperties:
          type: string
        type: object
    type: object
  api_v1_agentgroup.Attributes:
    additionalProperties:
      type: string
    type: object
info:
  contact: {}
  description: This is the API server for OpAMP Commander, providing endpoints for
    managing OpAMP agents.
  termsOfService: http://swagger.io/terms/
  title: OpAMP Commander API Server
  version: "1.0"
paths:
  /api/v1/agentgroups:
    get:
      description: Retrieves a list of agent groups with pagination options.
      parameters:
      - description: Maximum number of agent groups to return
        in: query
        name: limit
        type: integer
      - description: Token to continue listing agent groups
        in: query
        name: continue
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/AgentGroup'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: List Agent Groups
      tags:
      - agentgroup
    post:
      consumes:
      - application/json
      description: Create a new agent group.
      parameters:
      - description: Agent Group to create
        in: body
        name: agentGroup
        required: true
        schema:
          $ref: '#/definitions/AgentGroupCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/AgentGroup'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create Agent Group
      tags:
      - agentgroup
  /api/v1/agentgroups/{name}:
    delete:
      description: Mark an agent group as deleted.
      parameters:
      - description: Agent Group ID
        in: path
        name: name
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete Agent Group
      tags:
      - agentgroup
    get:
      consumes:
      - application/json
      description: Retrieve an agent group by its ID.
      parameters:
      - description: Agent Group Name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AgentGroup'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get Agent Group
      tags:
      - agentgroup
    put:
      consumes:
      - application/json
      description: Update an existing agent group.
      parameters:
      - description: Agent Group Name
        in: path
        name: name
        required: true
        type: string
      - description: Updated Agent Group
        in: body
        name: agentGroup
        required: true
        schema:
          $ref: '#/definitions/AgentGroup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AgentGroup'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update Agent Group
      tags:
      - agentgroup
  /api/v1/agents:
    get:
      consumes:
      - application/json
      description: Retrieve a list of agents.
      parameters:
      - description: Maximum number of agents to return
        in: query
        name: limit
        type: integer
      - description: Token to continue listing agents
        in: query
        name: continue
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/Agent'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: List Agents
      tags:
      - agent
  /api/v1/agents/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve an agent by its instance UID.
      parameters:
      - description: Instance UID of the agent
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Agent'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get Agent
      tags:
      - agent
  /api/v1/agents/{id}/update-agent-config:
    post:
      consumes:
      - application/json
      description: Create a new command to update the agent configuration.
      parameters:
      - description: Instance UID of the agent
        in: path
        name: id
        required: true
        type: string
      - description: Request body containing the remote configuration
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/UpdateAgentConfigRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/AgentCommand'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update Agent Configuration
      tags:
      - agent
  /api/v1/auth/basic:
    get:
      consumes:
      - application/json
      description: Authenticate using basic auth credentials.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AuthnTokenResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      summary: Basic Authentication
      tags:
      - auth
      - basic
  /api/v1/auth/github:
    get:
      consumes:
      - application/json
      description: Returns the GitHub OAuth2 authentication URL.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/OAuth2AuthCodeURLResponse'
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: GitHub OAuth2 Authentication
      tags:
      - auth
      - github
  /api/v1/auth/github/device:
    get:
      consumes:
      - application/json
      description: Initiates device authorization for GitHub OAuth2.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DeviceAuthnTokenResponse'
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: GitHub Device Authentication
      tags:
      - auth
      - github
  /api/v1/auth/github/device/exchange:
    get:
      consumes:
      - application/json
      description: Exchanges a device code for an authentication token.
      parameters:
      - description: Device code to exchange
        in: query
        name: device_code
        required: true
        type: string
      - description: Optional expiry time in RFC3339 format
        in: query
        name: expiry
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AuthnTokenResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: GitHub Device Code Exchange
      tags:
      - auth
      - github
  /api/v1/auth/info:
    get:
      description: Get Authentication Info.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/InfoResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      summary: Info
      tags:
      - auth
      - basic
  /api/v1/commands:
    get:
      consumes:
      - application/json
      description: Retrieve a list of commands.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/CommandAudit'
            type: array
        "500":
          description: Failed to list commands
          schema:
            additionalProperties: true
            type: object
      summary: List Commands
      tags:
      - command
  /api/v1/commands/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a command by its ID.
      parameters:
      - description: Command ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/CommandAudit'
        "400":
          description: Invalid command ID
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to get command
          schema:
            additionalProperties: true
            type: object
      summary: Get Command
      tags:
      - command
  /api/v1/connections:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all connections.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/Connection'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: List Connections
      tags:
      - connection
  /api/v1/ping:
    get:
      consumes:
      - application/json
      description: Ping the server to check if it is alive.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/PingResponse'
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Ping
      tags:
      - ping
  /api/v1/version:
    get:
      consumes:
      - application/json
      description: Retrieve the server version information.
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/VersionInfo'
      summary: Get Server Version
      tags:
      - version
  /auth/github:
    get:
      consumes:
      - application/json
      description: Redirects to GitHub for OAuth2 authentication.
      produces:
      - application/json
      responses:
        "302":
          description: Found
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: GitHub OAuth2 Authentication
      tags:
      - auth
      - github
  /auth/github/callback:
    get:
      consumes:
      - application/json
      description: Exchanges the code received from GitHub for an authentication token.
      parameters:
      - description: State parameter to prevent CSRF attacks
        in: query
        name: state
        required: true
        type: string
      - description: Code received from GitHub after authentication
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AuthnTokenResponse'
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: GitHub OAuth2 Callback
      tags:
      - auth
      - github
  /healthz:
    get:
      consumes:
      - application/json
      description: Check if the service is healthy
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "503":
          description: Service Unavailable
          schema:
            type: string
      summary: Liveness Check
      tags:
      - Health
  /readyz:
    get:
      consumes:
      - application/json
      description: Check if the service is ready
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "503":
          description: Service Unavailable
          schema:
            type: string
      summary: Readiness Check
      tags:
      - Health
swagger: "2.0"
